library(R2WinBUGS)
model.file <- system.file(package="R2WinBUGS", "model", "schools.txt")
# Some example data (see ?schools for details):
data(schools)
J <- nrow(schools)
y <- schools$estimate
sigma.y <- schools$sd
data <- list(J=J, y=y, sigma.y=sigma.y)
inits <- function(){
list(theta=rnorm(J, 0, 100), mu.theta=rnorm(1, 0, 100),
sigma.theta=runif(1, 0, 100))
}
## or alternatively something like:
# inits <- list(
#   list(theta=rnorm(J, 0, 90), mu.theta=rnorm(1, 0, 90),
#        sigma.theta=runif(1, 0, 90)),
#   list(theta=rnorm(J, 0, 100), mu.theta=rnorm(1, 0, 100),
#        sigma.theta=runif(1, 0, 100))
#   list(theta=rnorm(J, 0, 110), mu.theta=rnorm(1, 0, 110),
#        sigma.theta=runif(1, 0, 110)))
parameters <- c("theta", "mu.theta", "sigma.theta")
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000,
bugs.directory="/Applications/Wineskin/WinBUGS.app/Contents/Resources/drive_c/Program Files/WinBUGS14")
print(schools.sim)
plot(schools.sim)
# For a summary table, use
# https://github.com/jkarreth/JKmisc/blob/master/mcmctab.R
devtools::source_url("https://raw.githubusercontent.com/jkarreth/JKmisc/master/mcmctab.R")
mcmctab(schools.sim, jags = FALSE)
# Access posterior draws for postestimation
schools.out <- schools.sim$sims.matrix
summary(schools.out)
str(schools.sim$sims.matrix)
library(coda)
foo <- as.mcmc(schools.sim$sims.array)
summary(foo)
foo2 <- mcmcUpgrade(foo)
str(schools.sim)
str(schools.sim$summary)
(schools.sim$summary)
class(schools.sim)
class(angell.fit)
Statelevel <- read.dta("http://www.princeton.edu/~jkastell/MRP_primer/state_level_update.dta",convert.underscore = TRUE)
library(foreign)
Statelevel <- read.dta("http://www.princeton.edu/~jkastell/MRP_primer/state_level_update.dta",convert.underscore = TRUE)
table(Statelevel$sstate)
length(Statelevel$sstate)
Megapoll <- read.dta("http://www.princeton.edu/~jkastell/MRP_primer/gay_marriage_megapoll.dta", convert.underscore = TRUE)
Megapoll <- Megapoll[Megapoll$state != "", ]
Megapoll <- Megapoll[order(Megapoll$state), ]
State.names <- sort(unique(Megapoll$state))
Statelevel <- Statelevel[order(Statelevel$sstate), ]
Statelevel
Statelevel$state.cat <- 0
Statelevel[which(Statelevel$sstate %in% State.names), ]
as.numeric(as.factor(Statelevel[which(Statelevel$sstate %in% State.names), ]$sstate))
Statelevel$state.cat <- 0
Statelevel[which(Statelevel$sstate %in% State.names), ]$state.cat <- as.numeric(as.factor(Statelevel[which(Statelevel$sstate %in% State.names), ]$sstate))
Census <- read.dta("http://www.princeton.edu/~jkastell/MRP_primer/poststratification%202000.dta",convert.underscore = TRUE)
Megapoll.dat <- Megapoll[, c("yes.of.all", "race.female", "age.cat", "edu.cat", "age.edu.cat", "state.cat", "region.cat", "poll.cat", "p.relig.full", "p.kerry.full")]
head(Megapoll)
Megapoll$race.female <- (Megapoll$female * 3) + Megapoll$race.wbh # from 1 for white males to 6 for hispanic females
Megapoll$age.edu.cat <- 4 * (Megapoll$age.cat - 1) + Megapoll$edu.cat # from 1 for 18-29 with low edu to 16 for 65+ with high edu
Megapoll$poll.cat <- as.numeric(as.factor(Megapoll$poll)) # indicator for each of the 5 polls
Megapoll$state.cat <- as.numeric(as.factor(Megapoll$state)) # indicator for state (for varying intercepts)
Megapoll$p.evang.full <- Statelevel$p.evang[Megapoll$state.initnum] # proportion of evangelicals in respondent's state
Megapoll$p.mormon.full <-Statelevel$p.mormon[Megapoll$state.initnum] # proportion of mormon's in respondent's state
Megapoll$p.relig.full <- Megapoll$p.evang.full + Megapoll$p.mormon.full # combined evangelical + mormon proportions
Megapoll$p.kerry.full <- Statelevel$kerry.04[Megapoll$state.initnum] # kerry's % of 2-party vote in respondent's state in 2004
Megapoll.dat <- Megapoll[, c("yes.of.all", "race.female", "age.cat", "edu.cat", "age.edu.cat", "state.cat", "region.cat", "poll.cat", "p.relig.full", "p.kerry.full")]
individual.bmod <- glmer2stan(
formula = yes.of.all ~ (1|race.female) + (1|age.cat) + (1|edu.cat) +
(1|age.edu.cat) + (1|state.cat) + (1|region.cat) + (1|poll.cat) +
p.relig.full + p.kerry.full,
data = Megapoll.dat,
family = "binomial",
sample = FALSE)
library(glmer2stan)
individual.bmod <- glmer2stan(
formula = yes.of.all ~ (1|race.female) + (1|age.cat) + (1|edu.cat) +
(1|age.edu.cat) + (1|state.cat) + (1|region.cat) + (1|poll.cat) +
p.relig.full + p.kerry.full,
data = Megapoll.dat,
family = "binomial",
sample = FALSE)
show(individual.bmod)
?stan
library(rstan)
?stan
Megapoll1.dat <- Megapoll[, c("state", "state.cat", "region.cat", "yes.of.all", "race.female", "age.cat", "edu.cat", "age.edu.cat", "poll.cat", "p.relig.full", "p.kerry.full")]
Megapoll1.dat <- na.omit(Megapoll1.dat)
Megapoll2.dat <- Megapoll[, c("state.cat", "region.cat", "p.relig.full", "p.kerry.full")]
Megapoll2.dat <- aggregate(x = Megapoll, by = list(statenum = Megapoll$state.cat), FUN = function(x) x[1])
Megapoll2.dat <- Megapoll2.dat[, -c(1)]
Megapoll.datjags <- as.list(Megapoll1.dat)
Megapoll.datjags$statenuml2 <- Megapoll2.dat$state.cat
Megapoll.datjags$region.catl2 <- Megapoll2.dat$region.cat
Megapoll.datjags$poll.catl2 <- Megapoll2.dat$poll.cat
Megapoll.datjags$p.relig.full.state <- Megapoll2.dat$p.relig.full
Megapoll.datjags$p.kerry.full.state <- Megapoll2.dat$p.kerry.full
Megapoll.datjags$N.resp <- nrow(Megapoll1.dat)
Megapoll.datjags$N.state <- nrow(Megapoll2.dat)
Megapoll.datjags$N.race.female <- length(unique(Megapoll1.dat$race.female))
Megapoll.datjags$N.age.cat <- length(unique(Megapoll1.dat$age.cat))
Megapoll.datjags$N.edu.cat <- length(unique(Megapoll1.dat$edu.cat))
Megapoll.datjags$N.age.edu.cat <- length(unique(Megapoll1.dat$age.edu.cat))
Megapoll.datjags$N.edu.cat <- length(unique(Megapoll1.dat$edu.cat))
Megapoll.datjags$N.region.cat <- length(unique(Megapoll1.dat$region.cat))
Megapoll.datjags$N.poll <- length(unique(Megapoll1.dat$poll.cat))
individual.modjags <- function(){
for (i in 1:N.resp){
yes.of.all[i] ~ dbern(p[i])
logit(p[i]) <- b.intercept +
b.relig * p.relig.full[i] +
b.kerry * p.kerry.full[i] +
b.race.female[race.female[i]] +
b.age[age.cat[i]] +
b.edu[edu.cat[i]] +
b.age.edu[age.edu.cat[i]] +
b.state[state.cat[i]] +
b.region[region.cat[i]] +
b.poll[poll.cat[i]]
}
for(i in 1:N.race.female){b.race.female[i] ~ dnorm(0, tau.race.female)}
for(i in 1:N.age.cat){b.age[i] ~ dnorm(0, tau.age)}
for(i in 1:N.edu.cat){b.edu[i] ~ dnorm(0, tau.edu)}
for(i in 1:N.age.edu.cat){b.age.edu[i] ~ dnorm(0, tau.age.edu)}
for(i in 1:N.state){b.state[i] ~ dnorm(0, tau.state)}
for(i in 1:N.region.cat){b.region[i] ~ dnorm(0, tau.region)}
for(i in 1:N.poll){b.poll[i] ~ dnorm(0, tau.poll)}
b.intercept ~ dnorm(0, .1)
b.relig ~ dnorm(0, .1)
b.kerry ~ dnorm(0, .1)
#   mu.race.female ~ dnorm(0, .1)
#   mu.age.cat ~ dnorm(0, .1)
#   mu.edu.cat ~ dnorm(0, .1)
#   mu.age.edu.cat ~ dnorm(0, .1)
#   mu.state ~ dnorm(0, .1)
#   mu.region ~ dnorm(0, .1)
#   mu.poll ~ dnorm(0, .1)
tau.race.female ~ dgamma(1, 1)
tau.age ~ dgamma(1, 1)
tau.edu ~ dgamma(1, 1)
tau.age.edu ~ dgamma(1, 1)
tau.state ~ dgamma(1, 1)
tau.region ~ dgamma(1, 1)
tau.poll ~ dgamma(1, 1)
}
individual.params <- c("b.intercept", "b.race.female", "b.age", "b.edu", "b.age.edu", "b.state", "b.region",
"b.poll", "b.relig", "b.kerry")
library(ggmcmc)
?ggs
individual.ggs <- ggs(individual.mcmc)
individual.fit <- jags(
data = Megapoll.datjags,
inits = NULL,
parameters.to.save = individual.params,
model.file = individual.modjags,
n.chains = 3,
n.iter = 20000,
n.burnin = 10000,
n.thin = 5)
library(R2jags)
## Level-1 (individual) data
Megapoll1.dat <- Megapoll[, c("state", "state.cat", "region.cat", "yes.of.all", "race.female", "age.cat", "edu.cat", "age.edu.cat", "poll.cat", "p.relig.full", "p.kerry.full")]
Megapoll1.dat <- na.omit(Megapoll1.dat)
## Level-2 (state) data
Megapoll2.dat <- Megapoll[, c("state.cat", "region.cat", "p.relig.full", "p.kerry.full")]
## Collapse to state-level
Megapoll2.dat <- aggregate(x = Megapoll, by = list(statenum = Megapoll$state.cat), FUN = function(x) x[1])
Megapoll2.dat <- Megapoll2.dat[, -c(1)]
Megapoll.datjags <- as.list(Megapoll1.dat)
Megapoll.datjags$statenuml2 <- Megapoll2.dat$state.cat
Megapoll.datjags$region.catl2 <- Megapoll2.dat$region.cat
Megapoll.datjags$poll.catl2 <- Megapoll2.dat$poll.cat
Megapoll.datjags$p.relig.full.state <- Megapoll2.dat$p.relig.full
Megapoll.datjags$p.kerry.full.state <- Megapoll2.dat$p.kerry.full
Megapoll.datjags$N.resp <- nrow(Megapoll1.dat)
Megapoll.datjags$N.state <- nrow(Megapoll2.dat)
Megapoll.datjags$N.race.female <- length(unique(Megapoll1.dat$race.female))
Megapoll.datjags$N.age.cat <- length(unique(Megapoll1.dat$age.cat))
Megapoll.datjags$N.edu.cat <- length(unique(Megapoll1.dat$edu.cat))
Megapoll.datjags$N.age.edu.cat <- length(unique(Megapoll1.dat$age.edu.cat))
Megapoll.datjags$N.edu.cat <- length(unique(Megapoll1.dat$edu.cat))
Megapoll.datjags$N.region.cat <- length(unique(Megapoll1.dat$region.cat))
Megapoll.datjags$N.poll <- length(unique(Megapoll1.dat$poll.cat))
## Model
individual.modjags <- function(){
for (i in 1:N.resp){
yes.of.all[i] ~ dbern(p[i])
logit(p[i]) <- b.intercept +
b.relig * p.relig.full[i] +
b.kerry * p.kerry.full[i] +
b.race.female[race.female[i]] +
b.age[age.cat[i]] +
b.edu[edu.cat[i]] +
b.age.edu[age.edu.cat[i]] +
b.state[state.cat[i]] +
b.region[region.cat[i]] +
b.poll[poll.cat[i]]
}
for(i in 1:N.race.female){b.race.female[i] ~ dnorm(0, tau.race.female)}
for(i in 1:N.age.cat){b.age[i] ~ dnorm(0, tau.age)}
for(i in 1:N.edu.cat){b.edu[i] ~ dnorm(0, tau.edu)}
for(i in 1:N.age.edu.cat){b.age.edu[i] ~ dnorm(0, tau.age.edu)}
for(i in 1:N.state){b.state[i] ~ dnorm(0, tau.state)}
for(i in 1:N.region.cat){b.region[i] ~ dnorm(0, tau.region)}
for(i in 1:N.poll){b.poll[i] ~ dnorm(0, tau.poll)}
b.intercept ~ dnorm(0, .1)
b.relig ~ dnorm(0, .1)
b.kerry ~ dnorm(0, .1)
#   mu.race.female ~ dnorm(0, .1)
#   mu.age.cat ~ dnorm(0, .1)
#   mu.edu.cat ~ dnorm(0, .1)
#   mu.age.edu.cat ~ dnorm(0, .1)
#   mu.state ~ dnorm(0, .1)
#   mu.region ~ dnorm(0, .1)
#   mu.poll ~ dnorm(0, .1)
tau.race.female ~ dgamma(1, 1)
tau.age ~ dgamma(1, 1)
tau.edu ~ dgamma(1, 1)
tau.age.edu ~ dgamma(1, 1)
tau.state ~ dgamma(1, 1)
tau.region ~ dgamma(1, 1)
tau.poll ~ dgamma(1, 1)
}
individual.params <- c("b.intercept", "b.race.female", "b.age", "b.edu", "b.age.edu", "b.state", "b.region",
"b.poll", "b.relig", "b.kerry")
individual.fit <- jags(
data = Megapoll.datjags,
inits = NULL,
parameters.to.save = individual.params,
model.file = individual.modjags,
n.chains = 3,
n.iter = 20000,
n.burnin = 10000,
n.thin = 5)
print(individual.fit)
library(mcmcplots)
mcmcplot(as.mcmc(individual.fit))
individual.modjags <- function(){
for (i in 1:N.resp){
yes.of.all[i] ~ dbern(p[i])
logit(p[i]) <- b.intercept +
b.relig * p.relig.full[i] +
b.kerry * p.kerry.full[i] +
b.race.female[race.female[i]] +
b.age[age.cat[i]] +
b.edu[edu.cat[i]] +
b.age.edu[age.edu.cat[i]] +
b.state[state.cat[i]] +
b.region[region.cat[i]] +
b.poll[poll.cat[i]]
}
for(i in 1:N.race.female){b.race.female[i] ~ dnorm(0, tau.race.female)}
for(i in 1:N.age.cat){b.age[i] ~ dnorm(0, tau.age)}
for(i in 1:N.edu.cat){b.edu[i] ~ dnorm(0, tau.edu)}
for(i in 1:N.age.edu.cat){b.age.edu[i] ~ dnorm(0, tau.age.edu)}
for(i in 1:N.state){b.state[i] ~ dnorm(0, tau.state)}
for(i in 1:N.region.cat){b.region[i] ~ dnorm(0, tau.region)}
for(i in 1:N.poll){b.poll[i] ~ dnorm(0, tau.poll)}
b.intercept ~ dnorm(0, .1)
b.relig ~ dnorm(0, .1)
b.kerry ~ dnorm(0, .1)
#   mu.race.female ~ dnorm(0, .1)
#   mu.age.cat ~ dnorm(0, .1)
#   mu.edu.cat ~ dnorm(0, .1)
#   mu.age.edu.cat ~ dnorm(0, .1)
#   mu.state ~ dnorm(0, .1)
#   mu.region ~ dnorm(0, .1)
#   mu.poll ~ dnorm(0, .1)
tau.race.female ~ dgamma(.5, .5)
tau.age ~ dgamma(.5, .5)
tau.edu ~ dgamma(.5, .5)
tau.age.edu ~ dgamma(.5, .5)
tau.state ~ dgamma(.5, .5)
tau.region ~ dgamma(.5, .5)
tau.poll ~ dgamma(.5, .5)
}
individual.fit <- jags(
data = Megapoll.datjags,
inits = NULL,
parameters.to.save = individual.params,
model.file = individual.modjags,
n.chains = 3,
n.iter = 20000,
n.burnin = 10000,
n.thin = 5)
print(individual.fit)
mcmcplot(as.mcmc(individual.fit))
individual.mcmc <- as.mcmc(individual.fit)
?save
save(individual.mcmc, file = "/Users/johanneskarreth/Documents/Uni/9 - ICPSR/2015/Applied Bayes/Slides (new)/Day 19/MRP/individual_mcmc.Rdata")
library(ggmcmc)
individual.ggs <- ggs(individual.mcmc)
ggs_caterpillar(individual.ggs)
ggs_caterpillar(individual.ggs, family = "b.")
str(individual.ggs)
head(individual.ggs)
ggs_density(individual.ggs, family = "b.")
individual.out.dat <- as.data.frame(as.matrix(individual.mcmc))
individual.out <- as.data.frame(as.matrix(individual.mcmc))
summary(individual.out)
cp.dat <- individual.out[, grep(x = names(individual.out), pattern = "b.")]
summary(cp.dat)
cp.dat <- individual.out[, !grep(x = names(individual.out), pattern = "b.state", fixed = TRUE)]
summary(cp.dat)
cp.dat <- individual.out[, grep(x = names(individual.out), pattern = "b.", fixed = TRUE)]
cp.dat <- individual.out[, -grep(x = names(individual.out), pattern = "b.state", fixed = TRUE)]
summary(cp.dat)
cp.dat <- individual.out[, grep(x = names(individual.out), pattern = "b.", fixed = TRUE)]
cp.dat <- cp.dat[, -grep(x = names(cp.dat), pattern = "b.state", fixed = TRUE)]
cp.dat <- cp.dat[, -grep(x = names(cp.dat), pattern = "b.region", fixed = TRUE)]
cp.dat <- cp.dat[, -grep(x = names(cp.dat), pattern = "b.poll", fixed = TRUE)]
summary(cp.dat)
ggs_caterpillar(cp.dat)
?ggs_caterpillar
ggs_caterpillar(ggs(cp.dat))
apply(cp.dat, 1, plot(density(x)))
apply(cp.dat, 1, function(x) plot(density(x)))
plot(density(rnorm(100)))
par(mfrow = c(10, 5)); apply(cp.dat, 1, function(x) plot(density(x))); par(mfrow = c(1, 1))
par(mfrow = c(10, 5)); apply(cp.dat, 1, function(x) plot(density(x))); par(mfrow = c(1, 1))
par(mfrow = c(10, 5)); apply(cp.dat, 1, function(x) plot(density(x))); par(mfrow = c(1, 1))
par(mfrow = c(5, 5)); apply(cp.dat, 1, function(x) plot(density(x))); par(mfrow = c(1, 1))
par(mfrow = c(5, 5)); apply(cp.dat, 2, function(x) plot(density(x))); par(mfrow = c(1, 1))
par(mfrow = c(5, 5)); apply(cp.dat, 2, function(x) plot(density(x))); par(mfrow = c(1, 1))
head(cp.dat)
plot(density(rnorm(100)))
?apply
cp.dat.sum <- apply(cp.dat, MARGIN = 2, function(x) quantile(x, probs = c(0.025, 0.1, 0.5, 0.9, 0.975)))
cp.dat.sum
cp.dat.sum <- t(apply(cp.dat, MARGIN = 2, function(x) quantile(x, probs = c(0.025, 0.1, 0.5, 0.9, 0.975))))
cp.dat.sum
names(cp.dat.sum) <- c("Low95", "Low80", "Median", "High80", "High95")
?geom_segment
ggplot(data = cp.dat.sum, aes(x = Median, y = variable)) + geom_point() +
geom_segment(aes(x = Low80, xend = High80), size = 2) +
geom_segment(aes(x = Low95, xend = High95), size = 2)
cp.dat.sum <- t(apply(cp.dat, MARGIN = 2, function(x) quantile(x, probs = c(0.025, 0.1, 0.5, 0.9, 0.975))))
names(cp.dat.sum) <- c("Low95", "Low80", "Median", "High80", "High95")
cp.dat.sum <- as.data.frame(cp.dat.sum)
cp.dat.sum$variable <- rownames(cp.dat.sum)
ggplot(data = cp.dat.sum, aes(x = Median, y = variable)) + geom_point() +
geom_segment(aes(x = Low80, xend = High80), size = 2) +
geom_segment(aes(x = Low95, xend = High95), size = 2)
cp.dat.sum
cp.dat.sum <- t(apply(cp.dat, MARGIN = 2, function(x) quantile(x, probs = c(0.025, 0.1, 0.5, 0.9, 0.975))))
names(cp.dat.sum) <- c("Low95", "Low80", "Median", "High80", "High95")
cp.dat.sum <- as.data.frame(cp.dat.sum)
cp.dat.sum$variable <- rownames(cp.dat.sum)
cp.dat.sum
cp.dat.sum <- t(apply(cp.dat, MARGIN = 2, function(x) quantile(x, probs = c(0.025, 0.1, 0.5, 0.9, 0.975))))
cp.dat.sum <- as.data.frame(cp.dat.sum)
names(cp.dat.sum) <- c("Low95", "Low80", "Median", "High80", "High95")
cp.dat.sum$variable <- rownames(cp.dat.sum)
cp.dat.sum
cp.dat <- cp.dat[, -grep(x = names(cp.dat), pattern = "b.intercept", fixed = TRUE)]
cp.dat.sum <- t(apply(cp.dat, MARGIN = 2, function(x) quantile(x, probs = c(0.025, 0.1, 0.5, 0.9, 0.975))))
cp.dat.sum <- as.data.frame(cp.dat.sum)
names(cp.dat.sum) <- c("Low95", "Low80", "Median", "High80", "High95")
cp.dat.sum$variable <- rownames(cp.dat.sum)
cp.dat.sum
ggplot(data = cp.dat.sum, aes(x = Median, y = variable)) + geom_point() +
geom_segment(aes(x = Low80, xend = High80), size = 2) +
geom_segment(aes(x = Low95, xend = High95), size = 1)
ggplot(data = cp.dat.sum, aes(x = Median, y = variable)) + geom_point() +
geom_segment(aes(x = Low80, xend = High80, yend = variable), size = 2) +
geom_segment(aes(x = Low95, xend = High95, yend = variable), size = 1)
ggplot(data = cp.dat.sum, aes(x = Median, y = variable)) + geom_point() +
geom_segment(aes(x = Low80, xend = High80, yend = variable), size = 1) +
geom_segment(aes(x = Low95, xend = High95, yend = variable), size = 0.5)
one.post <- list(posterior = as.numeric(c(rep(0, times = nrow(posterior.state.ranefs)))),
state.cat = 0,
state.name = "",
state.initnum = 0)
posterior.state.ranefs <- individual.out[, grep(pattern = "b.state", x = colnames(individual.out), fixed = TRUE)]
one.post <- list(posterior = as.numeric(c(rep(0, times = nrow(posterior.state.ranefs)))),
state.cat = 0,
state.name = "",
state.initnum = 0)
obs.state.initnum <- sort(unique(Megapoll$state.initnum))
obs.state <- sort(unique(Megapoll$state))
obs.state
obs.state.initnum
posterior.state.ranefs.list <- list()
for(i in 1:ncol(posterior.state.ranefs)){
posterior.state.ranefs.list[[i]] <- one.post
posterior.state.ranefs.list[[i]][[1]] <- as.numeric(posterior.state.ranefs[, i])
posterior.state.ranefs.list[[i]][[2]] <- i
posterior.state.ranefs.list[[i]][[3]] <- obs.state[i]
posterior.state.ranefs.list[[i]][[4]] <- obs.state.initnum[i]
}
posterior.state.ranefs.list[[50]] <- list(posterior = as.numeric(c(rep(0, times = nrow(posterior.state.ranefs)))),
state.cat = 0,
state.name = "AK",
state.initnum = 1)
posterior.state.ranefs.list[[51]] <- list(posterior = as.numeric(c(rep(0, times = nrow(posterior.state.ranefs)))),
state.cat = 0,
state.name = "HI",
state.initnum = 12)
posterior.state.ranefs.list <- posterior.state.ranefs.list[order(sapply(posterior.state.ranefs.list, function(x) x[[4]], simplify=TRUE), decreasing=FALSE)]
posterior.state.ranefs.mat <- do.call("cbind", lapply(posterior.state.ranefs.list, "[[", 1))
summary(posterior.state.ranefs.mat)
b.state <- as.data.frame(posterior.state.ranefs.mat)
names(b.state) <- Statelevel$sstate
b.intercept <- individual.out[, grep(pattern = "b.intercept", x = colnames(individual.out), fixed = TRUE)]
b.race.female <- individual.out[, grep(pattern = "b.race.female", x = colnames(individual.out), fixed = TRUE)]
b.age <- individual.out[, grep(pattern = "b.age", x = colnames(individual.out), fixed = TRUE)]
b.age <- b.age[, -c(grep(pattern = "b.age.edu", x = colnames(b.age), fixed = TRUE))]
b.edu <- individual.out[, grep(pattern = "b.edu", x = colnames(individual.out), fixed = TRUE)]
b.age.edu <- individual.out[, grep(pattern = "b.age.edu", x = colnames(individual.out), fixed = TRUE)]
b.region <- individual.out[, grep(pattern = "b.region", x = colnames(individual.out), fixed = TRUE)]
b.relig <- individual.out[, grep(pattern = "b.relig", x = colnames(individual.out), fixed = TRUE)]
b.kerry <- individual.out[, grep(pattern = "b.kerry", x = colnames(individual.out), fixed = TRUE)]
Xb <- b.intercept +
b.race.female[, Census$crace.female] +
b.age[, Census$cage.cat] +
b.edu[, Census$cedu.cat] +
b.age.edu[, Census$cage.edu.cat] +
b.state[, Census$cstate.initnum] +
b.region[, Census$cregion.cat] +
(b.relig %*% t(Census$cp.relig.full)) +
(b.kerry %*% t(Census$cp.kerry.full))
str(b.intercept)
str(b.race.female)
Xb <- b.intercept +
b.race.female[, Census$crace.female]
Xb <- b.intercept +
b.race.female[, Census$crace.female] +
b.age[, Census$cage.cat] +
b.edu[, Census$cedu.cat] +
b.age.edu[, Census$cage.edu.cat] +
b.state[, Census$cstate.initnum]
Xb <- b.intercept +
b.race.female[, Census$crace.female] +
b.age[, Census$cage.cat] +
b.edu[, Census$cedu.cat] +
b.age.edu[, Census$cage.edu.cat]
Xb <- b.intercept +
b.race.female[, Census$crace.female] +
b.age[, Census$cage.cat] +
b.edu[, Census$cedu.cat]
Xb <- b.intercept +
b.race.female[, Census$crace.female] +
b.age[, Census$cage.cat]
Xb <- b.intercept +
b.race.female[, Census$crace.female]
str(b.age)
head(Census)
Xb <- b.intercept +
b.race.female[, Census$crace.female] +
b.age[, Census$cage.cat]
table(Census$cage.cat)
Xb <- b.intercept +
b.race.female[, Census$crace.female] +
b.age[, Census$cage.cat]
b.state <- as.matrix(b.state)
b.intercept <- as.matrix(b.intercept)
b.race.female <- as.matrix(b.race.female)
b.age <- as.matrix(b.age)
b.edu <- as.matrix(b.edu)
b.age.edu <- as.matrix(b.age.edu)
b.region <- as.matrix(b.region)
Xb <- b.intercept +
b.race.female[, Census$crace.female] +
b.age[, Census$cage.cat] +
b.edu[, Census$cedu.cat] +
b.age.edu[, Census$cage.edu.cat] +
b.state[, Census$cstate.initnum] +
b.region[, Census$cregion.cat] +
(b.relig %*% t(Census$cp.relig.full)) +
(b.kerry %*% t(Census$cp.kerry.full))
Xb <- b.intercept +
b.race.female[, Census$crace.female] +
b.age[, Census$cage.cat] +
b.edu[, Census$cedu.cat] +
b.age.edu[, Census$cage.edu.cat] +
b.state[, Census$cstate.initnum] +
b.region[, Census$cregion.cat]
b.state <- as.data.frame(posterior.state.ranefs.mat)
names(b.state) <- Statelevel$sstate
b.intercept <- individual.out[, grep(pattern = "b.intercept", x = colnames(individual.out), fixed = TRUE)]
b.race.female <- individual.out[, grep(pattern = "b.race.female", x = colnames(individual.out), fixed = TRUE)]
b.age <- individual.out[, grep(pattern = "b.age", x = colnames(individual.out), fixed = TRUE)]
b.age <- b.age[, -c(grep(pattern = "b.age.edu", x = colnames(b.age), fixed = TRUE))]
b.edu <- individual.out[, grep(pattern = "b.edu", x = colnames(individual.out), fixed = TRUE)]
b.age.edu <- individual.out[, grep(pattern = "b.age.edu", x = colnames(individual.out), fixed = TRUE)]
b.region <- individual.out[, grep(pattern = "b.region", x = colnames(individual.out), fixed = TRUE)]
b.relig <- individual.out[, grep(pattern = "b.relig", x = colnames(individual.out), fixed = TRUE)]
b.kerry <- individual.out[, grep(pattern = "b.kerry", x = colnames(individual.out), fixed = TRUE)]
str(b.relig)
str(b.region)
str(b.age.edu)
Xb <- b.intercept +
b.race.female[, Census$crace.female] +
b.age[, Census$cage.cat] +
b.edu[, Census$cedu.cat] +
b.age.edu[, Census$cage.edu.cat] +
b.state[, Census$cstate.initnum] +
b.region[, Census$cregion.cat] +
(b.relig %*% t(Census$cp.relig.full)) +
(b.kerry %*% t(Census$cp.kerry.full))
str(individual.out)
str(b.age)
str(b.age.edu)
str(b.region)
str(b.relig)
str(b.kerry)
str(b.race.female)
sessionInfo()
